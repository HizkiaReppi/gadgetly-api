// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String    @db.VarChar(100)
  username      String    @unique @db.VarChar(50)
  email         String    @unique @db.VarChar(255)
  password      String    @db.VarChar(255)
  role          UserRole  @default(USER)
  last_login    DateTime? @db.Timestamp
  refresh_token String?   @db.VarChar(255)
  photo         String?   @db.VarChar(255)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  Seller        Seller?
  Order         Order[]

  @@map("users")
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String    @unique @db.VarChar(100)
  slug       String    @db.VarChar(50)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  products   Product[]

  @@map("categories")
}

model Seller {
  id         String    @id @default(uuid())
  user_id    String    @unique
  domicile   String    @db.VarChar(50)
  address    String    @db.VarChar(255)
  phone      String    @db.VarChar(15)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  user       User      @relation(fields: [user_id], references: [id])
  Product    Product[]

  @@index([user_id])
  @@map("sellers")
}

model Product {
  id          String         @id @default(uuid())
  category_id Int
  seller_id   String
  title       String         @db.VarChar(100)
  description String?        @db.Text
  price       Decimal        @db.Decimal(10, 2)
  condition   Condition
  color       String         @db.VarChar(50)
  storage     String         @db.VarChar(20)
  ram         String         @db.VarChar(20)
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  images      ProductImage[]
  category    Category       @relation(fields: [category_id], references: [id])
  seller      Seller         @relation(fields: [seller_id], references: [id])
  OrderItem   OrderItem[]

  @@index([category_id])
  @@index([seller_id])
  @@map("products")
}

model ProductImage {
  id         Int     @id @default(autoincrement())
  product_id String
  image_url  String  @db.VarChar(255)
  product    Product @relation(fields: [product_id], references: [id])

  @@index([product_id])
  @@map("product_images")
}

model Order {
  id              String       @id @default(uuid())
  user_id         String
  total_price     Decimal      @db.Decimal(10, 2)
  status          OrderStatus  @default(PENDING)
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  delivery        Delivery?
  user            User         @relation(fields: [user_id], references: [id])
  items           OrderItem[]
  detail          OrderDetail?

  @@index([user_id])
  @@map("orders")
}

model OrderDetail {
  id              String   @id @default(uuid())
  order_id        String   @unique
  fullname        String   @db.VarChar(100)
  phone           String   @db.VarChar(15)
  whatsapp        String   @db.VarChar(15)
  address         String   @db.VarChar(255)
  email           String   @db.VarChar(255)
  payment_method  String   @db.VarChar(255)
  shipping_method String   @db.VarChar(255)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  order           Order    @relation(fields: [order_id], references: [id])

  @@index([order_id])
  @@map("order_details")
}

model OrderItem {
  id         String  @id @default(uuid())
  order_id   String
  product_id String
  order      Order   @relation(fields: [order_id], references: [id])
  product    Product @relation(fields: [product_id], references: [id])

  @@index([order_id])
  @@index([product_id])
  @@map("order_items")
}

model Delivery {
  id              String         @id @default(uuid())
  order_id        String         @unique
  tracking_number String?
  status          DeliveryStatus @default(PENDING)
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  order           Order          @relation(fields: [order_id], references: [id])

  @@index([order_id])
  @@map("deliveries")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  SHIPPED
  DELIVERED
  RETURNED
}

enum UserRole {
  USER
  ADMIN
}

enum Condition {
  NEW
  NORMAL
  REFURBISHED
}
